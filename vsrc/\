`timescale 1ns / 1ps
module torecFN #(
	parameter FP_BITS     = 32,
	parameter EXP_BITS    = 8 ,
	parameter FRA_BITS    = 23,
	parameter SIG_BITS    = 32,
	parameter RECEXP_BITS = 9 ,
	parameter EXP_OFFSET  = 9'b1_0000_0001
)(
	input 								   sign        ,
	input  [RECEXP_BITS-1:0] exp				 ,
	input  [SIG_BITS   -1:0] sig				 ,
	input 									 isNAN       ,
	input 								 	 isINf       ,
	input 								 	 isZero      ,
	input 								 	 isNormalize ,
	input 								 	 isUnormalize,
	output [FP_BITS    -1:0] fp           
);

localparam FP_LOG  = clog2(FP_BITS);

wire								 sign_st				;
wire [EXP_BITS-1 :0] exp_st 				;
wire [FRA_BITS-1 :0] fra_st 				;

//EXP/SIG logic      
assign exp_st = isNAN				 ? {EXP_BITS{1'b1}}				:
								isINf  			 ? {EXP_BITS{1'b1}}				:
						 		isZero 			 ? {EXP_BITS{1'b0}}				:
						 		isUnormalize ? {EXP_BITS{1'b0}}				:
						 		isNormalize  ? (exp - EXP_OFFSET)[7:0]:
			                         {EXP_BITS{1'b1}}       ; 

assign fra_st = isNAN				 ? {FRA_BITS{1'b0}}											:
								isINf  			 ? {FRA_BITS{1'b0}}										  :
					   		isZero 			 ? {FRA_BITS{1'b0}}											:
					   		isUnormalize ? sig[SIG_BITS-4:SIG_BITS-4-EXP_BITS+1]:
					   		isNormalize  ? sig[SIG_BITS-4:SIG_BITS-4-EXP_BITS+1]:
					   		               {FRA_BITS{1'b0}}                     ;	

assign sign_st = sign;

function integer clog2;
	input integer value;
	integer i;
	begin
		clog2 = 0;
		for(i = value - 1; i > 0; i = i >> 1)
			clog2 = clog2 + 1;
	end
endfunction

endmodule
